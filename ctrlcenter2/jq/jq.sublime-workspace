{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Fin",
				"FinishedHandle"
			],
			[
				"JQ_NUM",
				"JQ_NUM_JOBS"
			],
			[
				"JQ_NUM_",
				"JQ_NUM_JOBS"
			],
			[
				"Fai",
				"FailIndex"
			],
			[
				"JqQue",
				"JqQueuePopInternal"
			],
			[
				"PendingFin",
				"PendingFinishNew"
			],
			[
				"JqE",
				"JqExecuteOne"
			],
			[
				"A",
				"ActiveJobs"
			],
			[
				"Child",
				"ChildIndex"
			],
			[
				"SEm",
				"SemaphoreTrigger"
			],
			[
				"Sem",
				"SemaphoreTrigger"
			],
			[
				"Qu",
				"QueueTriggerMask"
			],
			[
				"Que",
				"QueueTriggerMask"
			],
			[
				"JQ_MICR",
				"JQ_MICROPROFILE_SCOPE"
			],
			[
				"JqFinis",
				"JqFinishSubJob"
			],
			[
				"Pendin",
				"PendingFinish"
			],
			[
				"JqUnp",
				"JqUnpackStartAndQueue"
			],
			[
				"JQ_NU",
				"JQ_NUM_JOBS"
			],
			[
				"Link",
				"LinkHead"
			],
			[
				"Queu",
				"QueueIndex"
			],
			[
				"JqQu",
				"JqQueueEmpty"
			],
			[
				"Pre",
				"PreconditionCount"
			],
			[
				"JqUnpak",
				"JqUnpackStartAndQueue"
			],
			[
				"Claim",
				"ClaimedHandle"
			],
			[
				"Queue",
				"QueueIndex"
			],
			[
				"JQ",
				"JQ_LOCKLESS_POP"
			],
			[
				"JqUnpack",
				"JqUnpackStartAndQueue"
			],
			[
				"JqQueu",
				"JqQueuePopInternal"
			],
			[
				"JqUnpa",
				"JqUnpackStartAndQueue"
			],
			[
				"Pend",
				"PendingFinish"
			],
			[
				"JqAddPre",
				"JqAddPreconditionInternal"
			],
			[
				"Dep",
				"DependentJobLinkCounter"
			],
			[
				"PostBar",
				"PostBarrier0"
			],
			[
				"Pen",
				"PendingStart"
			],
			[
				"JqDep",
				"JqDependentJobLinkFreeList"
			],
			[
				"Precond",
				"PrecondJob"
			],
			[
				"Prec",
				"PrecondJob"
			],
			[
				"PreCond",
				"PrecondJob"
			],
			[
				"DEpe",
				"DependentJobLinks"
			],
			[
				"DEp",
				"DependentJobLinkHead"
			],
			[
				"Depe",
				"DependentJobLinks"
			],
			[
				"JQ_LO",
				"JQ_LOCKLESS_POP"
			],
			[
				"compare_exch",
				"compare_exchange_strong"
			],
			[
				"Fre",
				"FreeList"
			],
			[
				"JqFree",
				"JqFreeStack2"
			],
			[
				"JqAllo",
				"JqAllocStack"
			],
			[
				"Reser",
				"ReservedSuccessor"
			],
			[
				"JqIs",
				"JqIsDone"
			],
			[
				"Precon",
				"PreconditionCount"
			],
			[
				"MicroProfileCharacterMask",
				"MicroProfileCharacterMaskString"
			]
		]
	},
	"buffers":
	[
		{
			"file": "jqmultilocked.cpp",
			"settings":
			{
				"buffer_size": 41238,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "microprofile/microprofile.h",
			"settings":
			{
				"buffer_size": 110975,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/usr/include/c++/9/atomic",
			"settings":
			{
				"buffer_size": 43610,
				"line_ending": "Unix"
			}
		},
		{
			"file": "demo/demo_bench.cpp",
			"settings":
			{
				"buffer_size": 4366,
				"line_ending": "Unix"
			}
		},
		{
			"file": "jqinternal.cpp",
			"settings":
			{
				"buffer_size": 13236,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "jq.sublime-project",
			"settings":
			{
				"buffer_size": 487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "jqinternal.h",
			"settings":
			{
				"buffer_size": 17498,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "jq.h",
			"settings":
			{
				"buffer_size": 11221,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/usr/include/c++/9/cstdint",
			"settings":
			{
				"buffer_size": 2335,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 209 files for \"jq_make_fcontext\"\n\n/home/jonasm/git/jq/jqfcontext.h:\n   12  JqTransfer  jq_jump_fcontext( JqFContext const to, void * vp);\n   13  extern \"C\" \n   14: JqFContext  jq_make_fcontext( void * sp, std::size_t size, void (* fn)( JqTransfer) );\n   15  \n\n/home/jonasm/git/jq/jqlocked.cpp:\n  548  \t\tpJobData->nExternalId = nWorkIndex;\n  549  \t\tg_pJqJobStacks\t\t  = pJobData;\n  550: \t\tpJobData->pContextJob = jq_make_fcontext(pJobData->StackTop(), pJobData->StackSize(), JqContextRun);\n  551  \t\tJqTransfer T\t\t  = jq_jump_fcontext(pJobData->pContextJob, (void*)pJobData);\n  552  \t\tJQ_ASSERT(T.data == (void*)447);\n\n/home/jonasm/git/jq/jqlockless.cpp:\n  234  \t\tpJobData->nExternalId = nExternalId;\n  235  \t\tg_pJqJobStacks\t\t  = pJobData;\n  236: \t\tpJobData->pContextJob = jq_make_fcontext(pJobData->StackTop(), pJobData->StackSize(), JqContextRun);\n  237  \t\tJqTransfer T\t\t  = jq_jump_fcontext(pJobData->pContextJob, (void*)pJobData);\n  238  \t\tJQ_ASSERT(T.data == (void*)447);\n\n/home/jonasm/git/jq/jqmultilocked.cpp:\n  632  \t\tpJobData->pPipe\t\t  = &Pipe;\n  633  \t\tg_pJqJobStacks\t\t  = pJobData;\n  634: \t\tpJobData->pContextJob = jq_make_fcontext(pJobData->StackTop(), pJobData->StackSize(), JqContextRun);\n  635  \t\tJqTransfer T\t\t  = jq_jump_fcontext(pJobData->pContextJob, (void*)pJobData);\n  636  \t\tJQ_ASSERT(T.data == (void*)447);\n\n/home/jonasm/git/jq/boost_context/make_arm64_aapcs_elf_gas.S:\n   54  .text\n   55  .align  2\n   56: .global jq_make_fcontext\n   57: .type   jq_make_fcontext, %function\n   58: jq_make_fcontext:\n   59      # shift address in x0 (allocated stack) to lower 16 byte boundary\n   60      and x0, x0, ~0xF\n   ..\n   63      sub  x0, x0, #0xb0\n   64  \n   65:     # third arg of jq_make_fcontext() == address of context-function\n   66      # store address as a PC to jump in\n   67      str  x2, [x0, #0xa0]\n   ..\n   80      bl  _exit\n   81  \n   82: .size   jq_make_fcontext,.-jq_make_fcontext\n   83  # Mark that we don't need executable stack.\n   84  .section .note.GNU-stack,\"\",%progbits\n\n/home/jonasm/git/jq/boost_context/make_arm64_aapcs_macho_gas.S:\n   53  \n   54  .text\n   55: .globl _jq_make_fcontext\n   56  .balign 16\n   57  \n   58: _jq_make_fcontext:\n   59      ; shift address in x0 (allocated stack) to lower 16 byte boundary\n   60      and x0, x0, ~0xF\n\n/home/jonasm/git/jq/boost_context/make_arm_aapcs_elf_gas.S:\n   40  \n   41  .text\n   42: .globl jq_make_fcontext\n   43  .align 2\n   44: .type jq_make_fcontext,%function\n   45: jq_make_fcontext:\n   46      @ shift address in A1 to lower 16 byte boundary\n   47      bic  a1, a1, #15\n   ..\n   50      sub  a1, a1, #128\n   51  \n   52:     @ third arg of jq_make_fcontext() == address of context-function\n   53      str  a3, [a1, #104]\n   54  \n   ..\n   74      @ exit application\n   75      bl  _exit@PLT\n   76: .size jq_make_fcontext,.-jq_make_fcontext\n   77  \n   78  @ Mark that we don't need executable stack.\n\n/home/jonasm/git/jq/boost_context/make_arm_aapcs_macho_gas.S:\n   40  \n   41  .text\n   42: .globl _jq_make_fcontext\n   43  .align 2\n   44: _jq_make_fcontext:\n   45      @ shift address in A1 to lower 16 byte boundary\n   46      bic  a1, a1, #15\n\n/home/jonasm/git/jq/boost_context/make_arm_aapcs_pe_armasm.asm:\n   28      AREA |.text|, CODE\n   29      ALIGN 4\n   30:     EXPORT jq_make_fcontext\n   31      IMPORT _exit\n   32  \n   33: jq_make_fcontext PROC\n   34:     ; first arg of jq_make_fcontext() == top of context-stack\n   35      ; save top of context-stack (base) A4\n   36      mov  a4, a1\n   ..\n   44      ; save top address of context_stack as 'base'\n   45      str  a4, [a1, #0x8]\n   46:     ; second arg of jq_make_fcontext() == size of context-stack\n   47      ; compute bottom address of context-stack (limit)\n   48      sub  a4, a4, a2\n   ..\n   52      str  a4, [a1, #0x0]\n   53  \n   54:     ; third arg of jq_make_fcontext() == address of context-function\n   55      str  a3, [a1, #0x34]\n   56  \n\n/home/jonasm/git/jq/boost_context/make_i386_ms_pe_gas.asm:\n   27  .text\n   28  .p2align 4,,15\n   29: .globl\t_jq_make_fcontext\n   30: .def\t_jq_make_fcontext;\t.scl\t2;\t.type\t32;\t.endef\n   31: _jq_make_fcontext:\n   32:     /* first arg of jq_make_fcontext() == top of context-stack */\n   33      movl  0x04(%esp), %eax\n   34  \n   ..\n   51      fnstcw  0x4(%eax)\n   52  \n   53:     /* first arg of jq_make_fcontext() == top of context-stack */\n   54      movl  0x4(%esp), %ecx\n   55      /* save top address of context stack as 'base' */\n   56      movl  %ecx, 0x14(%eax)\n   57:     /* second arg of jq_make_fcontext() == size of context-stack */\n   58      movl  0x8(%esp), %edx\n   59      /* negate stack size for LEA instruction (== substraction) */\n   ..\n   69      movl  %ecx, 0x8(%eax)\n   70  \n   71:     /* third arg of jq_make_fcontext() == address of context-function */\n   72      /* stored in EBX */\n   73      movl  0xc(%esp), %ecx\n   ..\n  145  \n  146  .section .drectve\n  147: .ascii \" -export:\\\"jq_make_fcontext\\\"\"\n  148  \n\n/home/jonasm/git/jq/boost_context/make_i386_ms_pe_masm.asm:\n   27  .code\n   28  \n   29: jq_make_fcontext PROC BOOST_CONTEXT_EXPORT\n   30:     ; first arg of jq_make_fcontext() == top of context-stack\n   31      mov  eax, [esp+04h]\n   32  \n   ..\n   48      fnstcw  [eax+04h]\n   49  \n   50:     ; first arg of jq_make_fcontext() == top of context-stack\n   51      mov  ecx, [esp+04h]\n   52      ; save top address of context stack as 'base'\n   53      mov  [eax+014h], ecx\n   54:     ; second arg of jq_make_fcontext() == size of context-stack\n   55      mov  edx, [esp+08h]\n   56      ; negate stack size for LEA instruction (== substraction)\n   ..\n   66      mov  [eax+08h], ecx\n   67  \n   68:     ; third arg of jq_make_fcontext() == address of context-function\n   69      ; stored in EBX\n   70      mov  ecx, [esp+0ch]\n   ..\n  137      call  _exit\n  138      hlt\n  139: jq_make_fcontext ENDP\n  140  END\n  141  \n\n/home/jonasm/git/jq/boost_context/make_i386_sysv_elf_gas.S:\n   26  \n   27  .text\n   28: .globl jq_make_fcontext\n   29  .align 2\n   30: .type jq_make_fcontext,@function\n   31: jq_make_fcontext:\n   32:     /* first arg of jq_make_fcontext() == top of context-stack */\n   33      movl  0x4(%esp), %eax\n   34  \n   ..\n   43      leal  -0x28(%eax), %eax\n   44  \n   45:     /* third arg of jq_make_fcontext() == address of context-function */\n   46      /* stored in EBX */\n   47      movl  0xc(%esp), %ecx\n   ..\n  101      call  _exit@PLT\n  102      hlt\n  103: .size jq_make_fcontext,.-jq_make_fcontext\n  104  \n  105  /* Mark that we don't need executable stack.  */\n\n/home/jonasm/git/jq/boost_context/make_i386_sysv_macho_gas.S:\n   26  \n   27  .text\n   28: .globl _jq_make_fcontext\n   29  .align 2\n   30: _jq_make_fcontext:\n   31      /* first arg of make_fcontext() == top of context-stack */\n   32      movl  0x4(%esp), %eax\n\n/home/jonasm/git/jq/boost_context/make_mips32_o32_elf_gas.S:\n   58  \n   59  .text\n   60: .globl jq_make_fcontext\n   61  .align 2\n   62: .type jq_make_fcontext,@function\n   63: .ent jq_make_fcontext\n   64: jq_make_fcontext:\n   65  #ifdef __PIC__\n   66  .set    noreorder\n   ..\n   68  .set    reorder\n   69  #endif\n   70:     # first arg of jq_make_fcontext() == top address of context-stack\n   71      move $v0, $a0\n   72  \n   ..\n   80      addiu $v0, $v0, -112\n   81  \n   82:     # third arg of jq_make_fcontext() == address of context-function\n   83      sw  $a2, 92($v0)\n   84      # save global pointer in context-data\n   ..\n  112      # exit application\n  113      jalr  $t9\n  114: .end jq_make_fcontext\n  115: .size jq_make_fcontext, .-jq_make_fcontext\n  116  \n  117  /* Mark that we don't need executable stack.  */\n\n/home/jonasm/git/jq/boost_context/make_ppc32_sysv_elf_gas.S:\n   75  \n   76  .text\n   77: .globl jq_make_fcontext\n   78  .align 2\n   79: .type jq_make_fcontext,@function\n   80: jq_make_fcontext:\n   81      # save return address into R6\n   82      mflr  %r6\n   83  \n   84:     # first arg of jq_make_fcontext() == top address of context-function\n   85      # shift address in R3 to lower 16 byte boundary\n   86      clrrwi  %r3, %r3, 4\n   ..\n   90      subi  %r3, %r3, 336\n   91  \n   92:     # third arg of jq_make_fcontext() == address of context-function\n   93      stw  %r5, 240(%r3)\n   94  \n   ..\n  137      # exit application\n  138      bl  _exit@plt\n  139: .size jq_make_fcontext, .-jq_make_fcontext\n  140  \n  141  /* Mark that we don't need executable stack.  */\n\n/home/jonasm/git/jq/boost_context/make_ppc32_sysv_macho_gas.S:\n   75  \n   76  .text\n   77: .globl _jq_make_fcontext\n   78  .align 2\n   79: _jq_make_fcontext:\n   80      # save return address into R6\n   81      mflr  r6\n\n/home/jonasm/git/jq/boost_context/make_ppc32_sysv_xcoff_gas.S:\n   73   *                                                     *\n   74   *******************************************************/\n   75: \t.globl\tjq_make_fcontext[DS]\n   76: \t.globl .jq_make_fcontext[PR]\n   77  \t.align 2 \n   78: \t.csect  jq_make_fcontext[DS]\n   79: jq_make_fcontext:\n   80: \t.long .jq_make_fcontext[PR]\n   81: \t.csect .jq_make_fcontext[PR], 3\n   82: #.jq_make_fcontext:\n   83      # save return address into R6\n   84      mflr  6\n   85  \n   86:     # first arg of jq_make_fcontext() == top address of context-function\n   87      # shift address in R3 to lower 16 byte boundary\n   88      clrrwi  3, 3, 4\n   ..\n   92      subi  3, 3, 336\n   93  \n   94:     # third arg of jq_make_fcontext() == address of context-function\n   95      stw  5, 240(3)\n   96  \n\n/home/jonasm/git/jq/boost_context/make_ppc64_sysv_elf_gas.S:\n   67   *******************************************************/\n   68  \n   69: .globl jq_make_fcontext\n   70  #if _CALL_ELF == 2\n   71  \t.text\n   72  \t.align 2\n   73: jq_make_fcontext:\n   74: \taddis\t%r2, %r12, .TOC.-jq_make_fcontext@ha\n   75: \taddi\t%r2, %r2, .TOC.-jq_make_fcontext@l\n   76: \t.localentry jq_make_fcontext, . - jq_make_fcontext\n   77  #else\n   78  \t.section \".opd\",\"aw\"\n   79  \t.align 3\n   80: jq_make_fcontext:\n   81  # ifdef _CALL_LINUX\n   82: \t.quad\t.L.jq_make_fcontext,.TOC.@tocbase,0\n   83: \t.type\tjq_make_fcontext,@function\n   84  \t.text\n   85  \t.align 2\n   86: .L.jq_make_fcontext:\n   87  # else\n   88: \t.hidden\t.jq_make_fcontext\n   89: \t.globl\t.jq_make_fcontext\n   90: \t.quad\t.jq_make_fcontext,.TOC.@tocbase,0\n   91: \t.size\tjq_make_fcontext,24\n   92: \t.type\t.jq_make_fcontext,@function\n   93  \t.text\n   94  \t.align 2\n   95: .jq_make_fcontext:\n   96  # endif\n   97  #endif\n   ..\n   99      mflr  %r6\n  100  \n  101:     # first arg of jq_make_fcontext() == top address of context-stack\n  102      # shift address in R3 to lower 16 byte boundary\n  103      clrrdi  %r3, %r3, 4\n  ...\n  107      subi  %r3, %r3, 248\n  108  \n  109:     # third arg of jq_make_fcontext() == address of context-function\n  110      # entry point (ELFv2) or descriptor (ELFv1)\n  111  #if _CALL_ELF == 2\n  ...\n  164      nop\n  165  #if _CALL_ELF == 2\n  166: \t.size jq_make_fcontext, .-jq_make_fcontext\n  167  #else\n  168  # ifdef _CALL_LINUX\n  169: \t.size .jq_make_fcontext, .-.L.jq_make_fcontext\n  170  # else\n  171: \t.size .jq_make_fcontext, .-.jq_make_fcontext\n  172  # endif\n  173  #endif\n\n/home/jonasm/git/jq/boost_context/make_ppc64_sysv_macho_gas.S:\n   67  \n   68  .text\n   69: .globl _jq_make_fcontext\n   70: _jq_make_fcontext:\n   71      ; save return address into R6\n   72      mflr  r6\n\n/home/jonasm/git/jq/boost_context/make_ppc64_sysv_xcoff_gas.S:\n    1: \t.globl\tjq_make_fcontext[DS]\n    2: \t.globl .jq_make_fcontext[PR]\n    3  \t.align 2 \n    4: \t.csect .jq_make_fcontext[PR], 3\n    5: \t.globl _jq_make_fcontext\n    6: #._jq_make_fcontext:\n    7      # save return address into R6\n    8      mflr  6\n    9  \n   10:     # first arg of jq_make_fcontext() == top address of context-function\n   11      # shift address in R3 to lower 16 byte boundary\n   12      clrrwi  3, 3, 4\n   ..\n   16      subi  3, 3, 248\n   17  \n   18:     # third arg of jq_make_fcontext() == address of context-function\n   19      stw  5, 176(3)\n   20  \n\n/home/jonasm/git/jq/boost_context/make_x86_64_ms_pe_gas.asm:\n   90  .text\n   91  .p2align 4,,15\n   92: .globl\tjq_make_fcontext\n   93: .def\tjq_make_fcontext;\t.scl\t2;\t.type\t32;\t.endef\n   94: .seh_proc\tjq_make_fcontext\n   95: jq_make_fcontext:\n   96  .seh_endprologue\n   97  \n   98:     /* first arg of jq_make_fcontext() == top of context-stack */\n   99      movq  %rcx, %rax\n  100  \n  ...\n  107      leaq  -0x150(%rax), %rax\n  108  \n  109:     /* third arg of jq_make_fcontext() == address of context-function */\n  110      movq  %r8, 0x100(%rax)\n  111  \n  112:     /* first arg of jq_make_fcontext() == top of context-stack */\n  113      /* save top address of context stack as 'base' */\n  114      movq  %rcx, 0xc8(%rax)\n  115:     /* second arg of jq_make_fcontext() == size of context-stack */\n  116      /* negate stack size for LEA instruction (== substraction) */\n  117      negq  %rdx\n  ...\n  156      andq  $-32, %rsp\n  157      /* 32byte shadow-space for _exit() are */\n  158:     /* already reserved by jq_make_fcontext() */\n  159      /* exit code is zero */\n  160      xorq  %rcx, %rcx\n  ...\n  167  \n  168  .section .drectve\n  169: .ascii \" -export:\\\"jq_make_fcontext\\\"\"\n  170  \n\n/home/jonasm/git/jq/boost_context/make_x86_64_ms_pe_masm.asm:\n   88  \n   89  ; generate function table entry in .pdata and unwind information in\n   90: jq_make_fcontext PROC EXPORT FRAME\n   91      ; .xdata for a function's structured exception handling unwind behavior\n   92      .endprolog\n   93  \n   94:     ; first arg of jq_make_fcontext() == top of context-stack\n   95      mov  rax, rcx\n   96  \n   ..\n  103      sub  rax, 0150h\n  104  \n  105:     ; third arg of jq_make_fcontext() == address of context-function\n  106      ; stored in RBX\n  107      mov  [rax+0100h], r8\n  108  \n  109:     ; first arg of jq_make_fcontext() == top of context-stack\n  110      ; save top address of context stack as 'base'\n  111      mov  [rax+0c8h], rcx\n  112:     ; second arg of jq_make_fcontext() == size of context-stack\n  113      ; negate stack size for LEA instruction (== substraction)\n  114      neg  rdx\n  ...\n  160      call  _exit\n  161      hlt\n  162: jq_make_fcontext ENDP\n  163  END\n  164  \n\n/home/jonasm/git/jq/boost_context/make_x86_64_sysv_elf_gas.S:\n   26  \n   27  .text\n   28: .globl jq_make_fcontext\n   29: .type jq_make_fcontext,@function\n   30  .align 16\n   31: jq_make_fcontext:\n   32:     /* first arg of jq_make_fcontext() == top of context-stack */\n   33      movq  %rdi, %rax\n   34  \n   ..\n   40      leaq  -0x40(%rax), %rax\n   41  \n   42:     /* third arg of jq_make_fcontext() == address of context-function */\n   43      /* stored in RBX */\n   44      movq  %rdx, 0x28(%rax)\n   ..\n   76      call  _exit@PLT\n   77      hlt\n   78: .size jq_make_fcontext,.-jq_make_fcontext\n   79  \n   80  /* Mark that we don't need executable stack. */\n\n/home/jonasm/git/jq/boost_context/make_x86_64_sysv_macho_gas.S:\n   26  \n   27  .text\n   28: .globl _jq_make_fcontext\n   29  .align 8\n   30: _jq_make_fcontext:\n   31:     /* first arg of jq_make_fcontext() == top of context-stack */\n   32      movq  %rdi, %rax\n   33  \n   ..\n   39      leaq  -0x40(%rax), %rax\n   40  \n   41:     /* third arg of jq_make_fcontext() == address of context-function */\n   42      /* stored in RBX */\n   43      movq  %rdx, 0x28(%rax)\n\n/home/jonasm/git/jq/demo/demo_bench_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_coroutine_mm:\n    <binary>\n\n142 matches across 28 files\n\n\nSearching 581 files for \"JqGetCurrentThreadId\"\n\n/home/jonasm/git/jq/jq.h:\n  329  JQ_API int64_t\tJqGetTick();\n  330  \n  331: JQ_API uint64_t JqGetCurrentThreadId(); // for debugging.\n\n/home/jonasm/git/jq/jqinternal.cpp:\n   34  \t// printf(\"JqMutex::LOCK   %p\\n\", this);\n   35  \tJQLSC(g_JqLockOps.fetch_add(1));\n   36: \tJQ_AL(nThreadId = JqGetCurrentThreadId());\n   37  \tJQ_AL(nLockCount++);\n   38  }\n   ..\n   55  bool JqMutex::IsLocked()\n   56  {\n   57: \treturn (nThreadId == JqGetCurrentThreadId());\n   58  }\n   59  #endif\n   ..\n   81  \tSleepConditionVariableCS(&Cond, &Mutex.CriticalSection, INFINITE);\n   82  \n   83: \tJQ_AL(Mutex.nThreadId = JqGetCurrentThreadId());\n   84  \tJQ_AL(Mutex.nLockCount++);\n   85  }\n   ..\n  154  void JqMutex::Lock()\n  155  {\n  156: \tJQ_ASSERT(nThreadId != JqGetCurrentThreadId());\n  157  \tpthread_mutex_lock(&Mutex);\n  158  \tJQLSC(g_JqLockOps.fetch_add(1));\n  159: \t// printf(\"JqMutex::LOCK   %p  tid: %llx\\n\", this, JqGetCurrentThreadId());\n  160  \n  161: \tJQ_AL(nThreadId = JqGetCurrentThreadId());\n  162  \tJQ_AL(nLockCount++);\n  163  }\n  ...\n  172  \t}\n  173  #endif\n  174: \t// printf(\"JqMutex::UNLOCK %p  tid: %llx\\n\", this, JqGetCurrentThreadId());\n  175  \n  176  \tpthread_mutex_unlock(&Mutex);\n  ...\n  181  bool JqMutex::IsLocked()\n  182  {\n  183: \treturn nThreadId == JqGetCurrentThreadId();\n  184  }\n  185  #endif\n  ...\n  208  \tpthread_cond_wait(&Cond, &Mutex.Mutex);\n  209  \n  210: \tJQ_AL(Mutex.nThreadId = JqGetCurrentThreadId());\n  211  \tJQ_AL(Mutex.nLockCount++);\n  212  \n  ...\n  417  }\n  418  \n  419: uint64_t JqGetCurrentThreadId()\n  420  {\n  421  \treturn JqCurrentThreadId();\n\n/home/jonasm/git/jq/demo/demo_job_profile.cpp:\n  138  \tSBenchmarkData& Data = g_Stage1[Index];\n  139  \tData.TickStart\t\t = JqGetTick();\n  140: \tData.ThreadId\t\t = JqGetCurrentThreadId();\n  141  \n  142  \tJobSpinWork(STAGE1_SPIN);\n\n12 matches across 3 files\n\n\nSearching 581 files for \"JqGetCurrentThreadId\"\n\n/home/jonasm/git/jq/jq.h:\n  329  JQ_API int64_t\tJqGetTick();\n  330  \n  331: JQ_API uint64_t JqGetCurrentThreadId(); // for debugging.\n\n/home/jonasm/git/jq/jqinternal.cpp:\n  417  }\n  418  \n  419: uint64_t JqGetCurrentThreadId()\n  420  {\n  421  \treturn JqCurrentThreadId();\n\n/home/jonasm/git/jq/demo/demo_job_profile.cpp:\n  138  \tSBenchmarkData& Data = g_Stage1[Index];\n  139  \tData.TickStart\t\t = JqGetTick();\n  140: \tData.ThreadId\t\t = JqGetCurrentThreadId();\n  141  \n  142  \tJobSpinWork(STAGE1_SPIN);\n\n3 matches across 3 files\n\n\nSearching 580 files for \"JqInitAttributes\"\n\n/home/jonasm/git/jq/jq.h:\n  325  JQ_API void\t\tJqCrashAndDump();\n  326  JQ_API void\t\tJqDump();\n  327: JQ_API void\t\tJqInitAttributes(JqAttributes* pAttributes, uint32_t nNumWorkers);\n  328  JQ_API int64_t\tJqGetTicksPerSecond();\n  329  JQ_API int64_t\tJqGetTick();\n\n/home/jonasm/git/jq/jqinternal.cpp:\n  381  }\n  382  \n  383: void JqInitAttributes(JqAttributes* pAttributes, uint32_t nNumWorkers)\n  384  {\n  385  \tJQ_ASSERT(nNumWorkers <= JQ_MAX_THREADS);\n  ...\n  403  {\n  404  \tJqAttributes Attr;\n  405: \tJqInitAttributes(&Attr, nNumWorkers);\n  406  \tJqStart(&Attr);\n  407  }\n\n/home/jonasm/git/jq/README.md:\n   41  ```\n   42  \tJqAttributes Attr;\n   43: \tJqInitAttributes(&Attr, NUMBER_OF_WORKER_THREADS);\n   44  \tJqStart(&Attr);\n   45  ```\n\n/home/jonasm/git/jq/demo/demo_bench.cpp:\n   82  \t{\n   83  \t\tstatic JqAttributes Attr;\n   84: \t\tJqInitAttributes(&Attr, i);\n   85  \t\tAttr.Flags = nJqInitFlags;\n   86  \t\tJqStart(&Attr);\n   ..\n  110  \t{\n  111  \t\tstatic JqAttributes Attr;\n  112: \t\tJqInitAttributes(&Attr, i);\n  113  \t\tAttr.Flags = nJqInitFlags;\n  114  \t\tJqStart(&Attr);\n  ...\n  139  \t{\n  140  \t\tstatic JqAttributes Attr;\n  141: \t\tJqInitAttributes(&Attr, i);\n  142  \t\tAttr.Flags = nJqInitFlags;\n  143  \t\tJqStart(&Attr);\n\n/home/jonasm/git/jq/demo/demo_bench_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel.cpp:\n  470  #endif\n  471  \tstatic JqAttributes Attr;\n  472: \tJqInitAttributes(&Attr, JQ_TEST_WORKERS);\n  473  \tAttr.Flags = nJqInitFlags;\n  474  \tAttr.ThreadConfig[0] = JqThreadConfig{ 7, {0, 1, 2, 3, 4, 5, 6, 0xff} };\n\n/home/jonasm/git/jq/demo/demo_cancel_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_coroutine.cpp:\n  105  \tstatic uint32_t nNumWorkers = g_nNumWorkers;\n  106  \tstatic JqAttributes Attr;\n  107: \tJqInitAttributes(&Attr, nNumWorkers);\n  108  \tAttr.Flags = nJqInitFlags;\n  109  \t// Attr.nStackSizeSmall = 4<<10;\n  ...\n  175  \t\t\tprintf(\"\\n\");\n  176  \t\t\tJqStop();\n  177: \t\t\tJqInitAttributes(&Attr, 1 + nNumWorkers % 64);\n  178  \t\t\tAttr.Flags = nJqInitFlags;\n  179  \t\t\tJqStart(&Attr);\n\n/home/jonasm/git/jq/demo/demo_coroutine_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile.cpp:\n  231  \t// static uint32_t nNumWorkers = g_nNumWorkers;\n  232  \tstatic JqAttributes Attr;\n  233: \tJqInitAttributes(&Attr, g_NumWorkers - 1);\n  234  \tAttr.Flags\t\t\t = nJqInitFlags;\n  235  \tAttr.ThreadConfig[0] = JqThreadConfig{ 7, { 0, 1, 2, 3, 4, 5, 6, 0xff } };\n\n/home/jonasm/git/jq/demo/demo_job_profile_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node.cpp:\n   82  #endif\n   83  \tstatic JqAttributes Attr;\n   84: \tJqInitAttributes(&Attr, JQ_TEST_WORKERS);\n   85  \tAttr.Flags = nJqInitFlags;\n   86  \tAttr.ThreadConfig[0] = JqThreadConfig{ 7, {0, 1, 2, 3, 4, 5, 6, 0xff} };\n\n/home/jonasm/git/jq/demo/demo_node_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority.cpp:\n  498  \t// static uint32_t nNumWorkers = g_nNumWorkers;\n  499  \tstatic JqAttributes Attr;\n  500: \tJqInitAttributes(&Attr, JQ_TEST_WORKERS);\n  501  \tAttr.Flags\t\t\t = nJqInitFlags;\n  502  \tAttr.ThreadConfig[0] = JqThreadConfig{ 7, { 0, 1, 2, 3, 4, 5, 6, 0xff } };\n\n/home/jonasm/git/jq/demo/demo_priority_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress.cpp:\n  377  \tstatic uint32_t nNumWorkers = g_nNumWorkers;\n  378  \tstatic JqAttributes Attr;\n  379: \tJqInitAttributes(&Attr, nNumWorkers);\n  380  \tAttr.Flags = nJqInitFlags;\n  381  \t// Attr.nStackSizeSmall = 4<<10;\n  ...\n  447  \t\t\tprintf(\"\\n\");\n  448  \t\t\tJqStop();\n  449: \t\t\tJqInitAttributes(&Attr, 1 + nNumWorkers % 12);\n  450  \t\t\tAttr.Flags = nJqInitFlags;\n  451  \t\t\tJqStart(&Attr);\n\n/home/jonasm/git/jq/demo/demo_stress_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_mm:\n    <binary>\n\n66 matches across 27 files\n\n\nSearching 575 files for \"JqInitAttributes\"\n\n/home/jonasm/git/jq/jq.h:\n  329  JQ_API void\t\tJqCrashAndDump();\n  330  JQ_API void\t\tJqDump();\n  331: JQ_API void\t\tJqInitAttributes(JqAttributes* pAttributes, uint32_t nNumPipeOrders, uint32_t nNumWorkers);\n  332  JQ_API int64_t\tJqGetTicksPerSecond();\n  333  JQ_API int64_t\tJqGetTick();\n\n/home/jonasm/git/jq/jqinternal.cpp:\n  381  }\n  382  \n  383: void JqInitAttributes(JqAttributes* pAttributes, uint32_t nNumPipeOrders, uint32_t nNumWorkers)\n  384  {\n  385  \tJQ_ASSERT(nNumWorkers <= JQ_MAX_THREADS);\n  ...\n  412  {\n  413  \tJqAttributes Attr;\n  414: \tJqInitAttributes(&Attr, 1, nNumWorkers);\n  415  \tJqStart(&Attr);\n  416  }\n\n/home/jonasm/git/jq/README.md:\n   41  ```\n   42  \tJqAttributes Attr;\n   43: \tJqInitAttributes(&Attr, NUMBER_OF_WORKER_THREADS);\n   44  \tJqStart(&Attr);\n   45  ```\n\n/home/jonasm/git/jq/demo/demo_bench.cpp:\n   82  \t{\n   83  \t\tstatic JqAttributes Attr;\n   84: \t\tJqInitAttributes(&Attr, i);\n   85  \t\tAttr.Flags = nJqInitFlags;\n   86  \t\tJqStart(&Attr);\n   ..\n  110  \t{\n  111  \t\tstatic JqAttributes Attr;\n  112: \t\tJqInitAttributes(&Attr, i);\n  113  \t\tAttr.Flags = nJqInitFlags;\n  114  \t\tJqStart(&Attr);\n  ...\n  139  \t{\n  140  \t\tstatic JqAttributes Attr;\n  141: \t\tJqInitAttributes(&Attr, i);\n  142  \t\tAttr.Flags = nJqInitFlags;\n  143  \t\tJqStart(&Attr);\n\n/home/jonasm/git/jq/demo/demo_bench_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel.cpp:\n  470  #endif\n  471  \tstatic JqAttributes Attr;\n  472: \tJqInitAttributes(&Attr, JQ_TEST_WORKERS);\n  473  \tAttr.Flags = nJqInitFlags;\n  474  \tAttr.ThreadConfig[0] = JqThreadConfig{ 7, {0, 1, 2, 3, 4, 5, 6, 0xff} };\n\n/home/jonasm/git/jq/demo/demo_cancel_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_coroutine.cpp:\n  105  \tstatic uint32_t nNumWorkers = g_nNumWorkers;\n  106  \tstatic JqAttributes Attr;\n  107: \tJqInitAttributes(&Attr, nNumWorkers);\n  108  \tAttr.Flags = nJqInitFlags;\n  109  \t// Attr.nStackSizeSmall = 4<<10;\n  ...\n  175  \t\t\tprintf(\"\\n\");\n  176  \t\t\tJqStop();\n  177: \t\t\tJqInitAttributes(&Attr, 1 + nNumWorkers % 64);\n  178  \t\t\tAttr.Flags = nJqInitFlags;\n  179  \t\t\tJqStart(&Attr);\n\n/home/jonasm/git/jq/demo/demo_coroutine_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile.cpp:\n  231  \t// static uint32_t nNumWorkers = g_nNumWorkers;\n  232  \tstatic JqAttributes Attr;\n  233: \tJqInitAttributes(&Attr, 1, g_NumWorkers - 1);\n  234  \tAttr.Flags\t\t  = nJqInitFlags;\n  235  \tAttr.PipeOrder[0] = JqPipeOrder{ 7, { 0, 1, 2, 3, 4, 5, 6, 0xff } };\n\n/home/jonasm/git/jq/demo/demo_node.cpp:\n   82  #endif\n   83  \tstatic JqAttributes Attr;\n   84: \tJqInitAttributes(&Attr, JQ_TEST_WORKERS);\n   85  \tAttr.Flags = nJqInitFlags;\n   86  \tAttr.ThreadConfig[0] = JqThreadConfig{ 7, {0, 1, 2, 3, 4, 5, 6, 0xff} };\n\n/home/jonasm/git/jq/demo/demo_node_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority.cpp:\n  498  \t// static uint32_t nNumWorkers = g_nNumWorkers;\n  499  \tstatic JqAttributes Attr;\n  500: \tJqInitAttributes(&Attr, JQ_TEST_WORKERS);\n  501  \tAttr.Flags\t\t\t = nJqInitFlags;\n  502  \tAttr.ThreadConfig[0] = JqThreadConfig{ 7, { 0, 1, 2, 3, 4, 5, 6, 0xff } };\n\n/home/jonasm/git/jq/demo/demo_priority_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress.cpp:\n  377  \tstatic uint32_t nNumWorkers = g_nNumWorkers;\n  378  \tstatic JqAttributes Attr;\n  379: \tJqInitAttributes(&Attr, nNumWorkers);\n  380  \tAttr.Flags = nJqInitFlags;\n  381  \t// Attr.nStackSizeSmall = 4<<10;\n  ...\n  447  \t\t\tprintf(\"\\n\");\n  448  \t\t\tJqStop();\n  449: \t\t\tJqInitAttributes(&Attr, 1 + nNumWorkers % 12);\n  450  \t\t\tAttr.Flags = nJqInitFlags;\n  451  \t\t\tJqStart(&Attr);\n\n/home/jonasm/git/jq/demo/demo_stress_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_m:\n    <binary>\n\n51 matches across 22 files\n\n\nSearching 574 files for \"JqSetThread\"\n\n/home/jonasm/git/jq/jq.h:\n  317  JQ_API void\t\tJqStart(int nNumWorkers);\n  318  JQ_API void\t\tJqStart(JqAttributes* pAttributes);\n  319: JQ_API void\t\tJqSetThreadPipeOrder(JqPipeOrder* pConfig);\n  320  JQ_API int\t\tJqNumWorkers();\n  321  JQ_API void\t\tJqStop();\n\n/home/jonasm/git/jq/jqlocked.cpp:\n  331  }\n  332  \n  333: void JqSetThreadPipeConfig(JqThreadConfig* pConfig)\n  334  {\n  335  \tJQ_ASSERT(g_nJqNumPipes == 0); // its not supported to change this value, nor is it supported to set it on worker threads. set on init instead.\n\n/home/jonasm/git/jq/jqmultilocked.cpp:\n  405  }\n  406  \n  407: void JqSetThreadPipeConfig(JqPipeOrder* pConfig)\n  408  {\n  409  \tJQ_ASSERT(g_nJqNumPipes == 0); // its not supported to change this value, nor is it supported to set it on worker threads. set on init instead.\n\n/home/jonasm/git/jq/README.md:\n   17  * `JqExecuteOne`: can be called from any thread to execute a job. \n   18  * `JqExecuteChildren`: Execute one child job of job passed in.\n   19: * `JqSetThreadPipeConfig`: can be called to set how non worker threads select jobs, when fetching jobs through `JqExecuteOne` and `JqWait`\n   20  * `JqSpawn`: Adds a job and immediately waits for it.\n   21  * `JqCancel`: Attempt to cancel a job. Fails if started or finished. Note that the only way to find out if a job is cancelled is by the return value of this function.\n\n/home/jonasm/git/jq/demo/demo_bench_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel.cpp:\n  481  \tJqStart(&Attr);\n  482  \tJqPipeOrder MyPipeConfig = JqPipeOrder{ 2, { 0, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };\n  483: \tJqSetThreadPipeOrder(&MyPipeConfig);\n  484  #ifdef _WIN32\n  485  \tstd::atomic<int> keypressed;\n\n/home/jonasm/git/jq/demo/demo_cancel_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_coroutine_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile.cpp:\n  240  \n  241  \tJqStart(&Attr);\n  242: \tJqSetThreadPipeOrder(&Attr.PipeOrder[0]);\n  243  \n  244  #ifdef _WIN32\n\n/home/jonasm/git/jq/demo/demo_node_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority.cpp:\n  523  \tJqStart(&Attr);\n  524  \tJqPipeOrder MyPipeConfig = JqPipeOrder{ 2, { 0, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };\n  525: \tJqSetThreadPipeOrder(&MyPipeConfig);\n  526  \n  527  #ifdef _WIN32\n\n/home/jonasm/git/jq/demo/demo_priority_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_m:\n    <binary>\n\n43 matches across 19 files\n\n\nSearching 574 files for \"JqSetThreadPipeConfig\"\n\n/home/jonasm/git/jq/jqlocked.cpp:\n  331  }\n  332  \n  333: void JqSetThreadPipeConfig(JqThreadConfig* pConfig)\n  334  {\n  335  \tJQ_ASSERT(g_nJqNumPipes == 0); // its not supported to change this value, nor is it supported to set it on worker threads. set on init instead.\n\n/home/jonasm/git/jq/jqmultilocked.cpp:\n  405  }\n  406  \n  407: void JqSetThreadPipeConfig(JqPipeOrder* pConfig)\n  408  {\n  409  \tJQ_ASSERT(g_nJqNumPipes == 0); // its not supported to change this value, nor is it supported to set it on worker threads. set on init instead.\n\n/home/jonasm/git/jq/README.md:\n   17  * `JqExecuteOne`: can be called from any thread to execute a job. \n   18  * `JqExecuteChildren`: Execute one child job of job passed in.\n   19: * `JqSetThreadPipeConfig`: can be called to set how non worker threads select jobs, when fetching jobs through `JqExecuteOne` and `JqWait`\n   20  * `JqSpawn`: Adds a job and immediately waits for it.\n   21  * `JqCancel`: Attempt to cancel a job. Fails if started or finished. Note that the only way to find out if a job is cancelled is by the return value of this function.\n\n/home/jonasm/git/jq/demo/demo_bench_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_bench_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_coroutine_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_m:\n    <binary>\n\n39 matches across 15 files\n\n\nSearching 579 files for \"JqAddReserved\"\n\n/home/jonasm/git/jq/jq.h:\n  294  \n  295  // add reserved\n  296: JQ_API uint64_t JqAddReserved(uint64_t ReservedHandle, JqFunction JobFunc, int nNumJobs = 1, int nRange = -1, uint32_t nJobFlags = 0);\n  297  \n  298  // add successor\n\n/home/jonasm/git/jq/jqlocked.cpp:\n 1042  \n 1043  // add reserved\n 1044: uint64_t JqAddReserved(uint64_t ReservedHandle, JqFunction JobFunc, int nNumJobs, int nRange, uint32_t nJobFlags)\n 1045  {\n 1046  \treturn JqAddInternal(ReservedHandle, JobFunc, 0xff, nNumJobs, nRange, nJobFlags, 0);\n\n/home/jonasm/git/jq/jqmultilocked.cpp:\n 1145  \n 1146  // add reserved\n 1147: uint64_t JqAddReserved(uint64_t ReservedHandle, JqFunction JobFunc, int nNumJobs, int nRange, uint32_t nJobFlags)\n 1148  {\n 1149  \treturn JqAddInternal(ReservedHandle, JobFunc, 0xff, nNumJobs, nRange, nJobFlags, 0);\n\n/home/jonasm/git/jq/demo/demo_cancel_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority.cpp:\n  246  \t\t\tif(JobIndex == 999)\n  247  \t\t\t{\n  248: \t\t\t\tJqAddReserved(\n  249  \t\t\t\t\tReservedHandle, [pBar] { pBar->fetch_add(1); }, 2);\n  250  \t\t\t}\n\n/home/jonasm/git/jq/demo/demo_priority_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_mm:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_ll:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_mm:\n    <binary>\n\n43 matches across 17 files\n\n\nSearching 579 files for \"JqUsleep\"\n\n/home/jonasm/git/jq/jqinternal.h:\n   46  #define JQ_STRCASECMP _stricmp\n   47  typedef uint32_t ThreadIdType;\n   48: #define JQ_USLEEP(us) JqUsleep(us);\n   49  #define JqCurrentThreadId() GetCurrentThreadId()\n   50  #include <windows.h>\n   ..\n   64  \treturn ticks;\n   65  }\n   66: inline void JqUsleep(__int64 usec)\n   67  {\n   68  \tif(usec > 20000)\n\n/home/jonasm/git/jq/demo/demo_stress.cpp:\n  219  \t\t0, 3);\n  220  \n  221: \tuint64_t h1 = JqAdd([] { JqUsleep(2000); }, 0, 1);\n  222  \tuint64_t ex = 0;\n  223  \tbool\t bR = g_Handle.compare_exchange_strong(ex, h1);\n\n3 matches across 2 files\n\n\nSearching 572 files for \"P5\"\n\n/home/jonasm/git/jq/demo/demo_bench_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel.cpp:\n  206  \t\t\t\t[](int b, int e) {\n  207  \t\t\t\t\tMICROPROFILE_SCOPEI(\"JQ_TEST\", \"P1\", 0x0000ff);\n  208: \t\t\t\t\tJqAdd([](int b, int e) { MICROPROFILE_SCOPEI(\"JQ_TEST\", \"P5\", 0xffff00); }, 5, 500);\n  209  \t\t\t\t\tJobSpinWork(20);\n  210  \t\t\t\t},\n\n/home/jonasm/git/jq/demo/demo_cancel_jq2:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile_jq2:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority.cpp:\n  209  \t\t\t\t[] {\n  210  \t\t\t\t\tMICROPROFILE_SCOPEI(\"JQ_TEST\", \"BASE-1-CHILD\", MP_DARKSLATEGREY);\n  211: \t\t\t\t\tJqAdd([] { MICROPROFILE_SCOPEI(\"JQ_TEST\", \"P5\", 0xffff00); }, 5, 500);\n  212  \t\t\t\t\tJobSpinWork(20);\n  213  \t\t\t\t},\n\n/home/jonasm/git/jq/demo/demo_priority_jq2:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_jq2:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/stb/stb_image.h:\n 2233  // derived from jidctint -- DCT_ISLOW\n 2234  #define STBI__IDCT_1D(s0,s1,s2,s3,s4,s5,s6,s7) \\\n 2235:    int t0,t1,t2,t3,p1,p2,p3,p4,p5,x0,x1,x2,x3; \\\n 2236     p2 = s2;                                    \\\n 2237     p3 = s6;                                    \\\n ....\n 2255     p1 = t0+t3;                                 \\\n 2256     p2 = t1+t2;                                 \\\n 2257:    p5 = (p3+p4)*stbi__f2f( 1.175875602f);      \\\n 2258     t0 = t0*stbi__f2f( 0.298631336f);           \\\n 2259     t1 = t1*stbi__f2f( 2.053119869f);           \\\n 2260     t2 = t2*stbi__f2f( 3.072711026f);           \\\n 2261     t3 = t3*stbi__f2f( 1.501321110f);           \\\n 2262:    p1 = p5 + p1*stbi__f2f(-0.899976223f);      \\\n 2263:    p2 = p5 + p2*stbi__f2f(-2.562915447f);      \\\n 2264     p3 = p3*stbi__f2f(-1.961570560f);           \\\n 2265     p4 = p4*stbi__f2f(-0.390180644f);           \\\n ....\n 2582        int16x8_t sum37 = vaddq_s16(row3, row7); \\\n 2583        int16x8_t sumodd = vaddq_s16(sum17, sum35); \\\n 2584:       dct_long_mul(p5o, sumodd, rot1_0); \\\n 2585:       dct_long_mac(p1o, p5o, sum17, rot1_1); \\\n 2586:       dct_long_mac(p2o, p5o, sum35, rot1_2); \\\n 2587        dct_long_mul(p3o, sum37, rot2_0); \\\n 2588        dct_long_mul(p4o, sum15, rot2_1); \\\n ....\n 2661        uint8x8_t p3 = vqrshrun_n_s16(row3, 1);\n 2662        uint8x8_t p4 = vqrshrun_n_s16(row4, 1);\n 2663:       uint8x8_t p5 = vqrshrun_n_s16(row5, 1);\n 2664        uint8x8_t p6 = vqrshrun_n_s16(row6, 1);\n 2665        uint8x8_t p7 = vqrshrun_n_s16(row7, 1);\n ....\n 2676        dct_trn8_8(p0, p1);\n 2677        dct_trn8_8(p2, p3);\n 2678:       dct_trn8_8(p4, p5);\n 2679        dct_trn8_8(p6, p7);\n 2680  \n ....\n 2683        dct_trn8_16(p1, p3);\n 2684        dct_trn8_16(p4, p6);\n 2685:       dct_trn8_16(p5, p7);\n 2686  \n 2687        // pass 3\n 2688        dct_trn8_32(p0, p4);\n 2689:       dct_trn8_32(p1, p5);\n 2690        dct_trn8_32(p2, p6);\n 2691        dct_trn8_32(p3, p7);\n ....\n 2697        vst1_u8(out, p3); out += out_stride;\n 2698        vst1_u8(out, p4); out += out_stride;\n 2699:       vst1_u8(out, p5); out += out_stride;\n 2700        vst1_u8(out, p6); out += out_stride;\n 2701        vst1_u8(out, p7);\n\n/home/jonasm/git/jq/demo/stb/stb_image_write.h:\n 1223     float tmp6 = d1 - d6;\n 1224     float tmp2 = d2 + d5;\n 1225:    float tmp5 = d2 - d5;\n 1226     float tmp3 = d3 + d4;\n 1227     float tmp4 = d3 - d4;\n ....\n 1241  \n 1242     // Odd part\n 1243:    tmp10 = tmp4 + tmp5;       // phase 2\n 1244:    tmp11 = tmp5 + tmp6;\n 1245     tmp12 = tmp6 + tmp7;\n 1246  \n\n/home/jonasm/git/jq/demo/stb/deprecated/stb_image.c:\n 1230  // derived from jidctint -- DCT_ISLOW\n 1231  #define IDCT_1D(s0,s1,s2,s3,s4,s5,s6,s7)       \\\n 1232:    int t0,t1,t2,t3,p1,p2,p3,p4,p5,x0,x1,x2,x3; \\\n 1233     p2 = s2;                                    \\\n 1234     p3 = s6;                                    \\\n ....\n 1252     p1 = t0+t3;                                 \\\n 1253     p2 = t1+t2;                                 \\\n 1254:    p5 = (p3+p4)*f2f( 1.175875602f);            \\\n 1255     t0 = t0*f2f( 0.298631336f);                 \\\n 1256     t1 = t1*f2f( 2.053119869f);                 \\\n 1257     t2 = t2*f2f( 3.072711026f);                 \\\n 1258     t3 = t3*f2f( 1.501321110f);                 \\\n 1259:    p1 = p5 + p1*f2f(-0.899976223f);            \\\n 1260:    p2 = p5 + p2*f2f(-2.562915447f);            \\\n 1261     p3 = p3*f2f(-1.961570560f);                 \\\n 1262     p4 = p4*f2f(-0.390180644f);                 \\\n\n/home/jonasm/git/jq/microprofile/demo/d3d12_multithreading/SquidRoom.bin:\n    <binary>\n\n/home/jonasm/git/jq/microprofile/demo/vulkan/glm/detail/intrinsic_common.inl:\n   83  \n   84  \tstatic const __m128 GLM_VAR_USED _ps_1_3 = _mm_set_ps1(0.33333333333333333333333333333333f);\n   85: \tstatic const __m128 GLM_VAR_USED _ps_0p5 = _mm_set_ps1(0.5f);\n   86  \tstatic const __m128 GLM_VAR_USED _ps_1 = _mm_set_ps1(1.0f);\n   87  \tstatic const __m128 GLM_VAR_USED _ps_m1 = _mm_set_ps1(-1.0f);\n\n207 matches across 17 files\n\n\nSearching 572 files for \"\"P5\"\"\n\n/home/jonasm/git/jq/demo/demo_cancel.cpp:\n  206  \t\t\t\t[](int b, int e) {\n  207  \t\t\t\t\tMICROPROFILE_SCOPEI(\"JQ_TEST\", \"P1\", 0x0000ff);\n  208: \t\t\t\t\tJqAdd([](int b, int e) { MICROPROFILE_SCOPEI(\"JQ_TEST\", \"P5\", 0xffff00); }, 5, 500);\n  209  \t\t\t\t\tJobSpinWork(20);\n  210  \t\t\t\t},\n\n/home/jonasm/git/jq/demo/demo_priority.cpp:\n  209  \t\t\t\t[] {\n  210  \t\t\t\t\tMICROPROFILE_SCOPEI(\"JQ_TEST\", \"BASE-1-CHILD\", MP_DARKSLATEGREY);\n  211: \t\t\t\t\tJqAdd([] { MICROPROFILE_SCOPEI(\"JQ_TEST\", \"P5\", 0xffff00); }, 5, 500);\n  212  \t\t\t\t\tJobSpinWork(20);\n  213  \t\t\t\t},\n\n2 matches across 2 files\n\n\nSearching 572 files for \"JqConsumeStats\"\n\n/home/jonasm/git/jq/jq.h:\n  320  JQ_API uint32_t JqSelfJobIndex();\n  321  JQ_API int\t\tJqGetNumWorkers();\n  322: JQ_API void\t\tJqConsumeStats(JqStats* pStatsOut);\n  323  JQ_API bool\t\tJqExecuteOne();\n  324  JQ_API bool\t\tJqExecuteOne(uint8_t Queues);\n\n/home/jonasm/git/jq/jq2.cpp:\n  473  }\n  474  \n  475: void JqConsumeStats(JqStats* pStats)\n  476  {\n  477  \t*pStats\t\t\t\t\t\t   = JqState.Stats;\n\n/home/jonasm/git/jq/jqlocked.cpp:\n  356  }\n  357  \n  358: void JqConsumeStats(JqStats* pStats)\n  359  {\n  360  \tJqMutexLock lock(JqState.Mutex);\n\n/home/jonasm/git/jq/jqmultilocked.cpp:\n  421  }\n  422  \n  423: void JqConsumeStats(JqStats* pStats)\n  424  {\n  425  \t*pStats\t\t\t\t\t\t   = JqState.Stats;\n\n/home/jonasm/git/jq/README.md:\n   20  * `JqSpawn`: Adds a job and immediately waits for it.\n   21  * `JqCancel`: Attempt to cancel a job. Fails if started or finished. Note that the only way to find out if a job is cancelled is by the return value of this function.\n   22: * `JqConsumeStats`: Consume various internal stats.\n   23  \n   24  # Usage\n\n/home/jonasm/git/jq/demo/demo_bench_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel.cpp:\n  323  // \t\tfLimit = 5;\n  324  // \t\tJqStats Stats0;\n  325: // \t\tJqConsumeStats(&Stats0);\n  326  // \t\tStats.Add(Stats0);\n  327  // \t\tstatic bool bFirst = true;\n\n/home/jonasm/git/jq/demo/demo_cancel_jq2:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_cancel_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile_jq2:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_job_profile_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_node_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority.cpp:\n  427  \t\tfLimit = 5;\n  428  \t\tJqStats Stats0;\n  429: \t\tJqConsumeStats(&Stats0);\n  430  \t\tStats.Add(Stats0);\n  431  \t\tstatic bool\t\tbFirst\t\t\t   = true;\n\n/home/jonasm/git/jq/demo/demo_priority_jq2:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_priority_m:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress.cpp:\n  230  \t\tfLimit = 5;\n  231  \t\tJqStats Stats0;\n  232: \t\tJqConsumeStats(&Stats0);\n  233  \t\tStats.Add(Stats0);\n  234  \t\tstatic bool\t\tbFirst\t\t\t   = true;\n\n/home/jonasm/git/jq/demo/demo_stress_jq2:\n    <binary>\n\n/home/jonasm/git/jq/demo/demo_stress_m:\n    <binary>\n\n38 matches across 18 files\n",
			"settings":
			{
				"buffer_size": 41164,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "jqfcontext.h",
			"settings":
			{
				"buffer_size": 303,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "jqpipe.cpp",
			"settings":
			{
				"buffer_size": 7950,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "demo/Makefile",
			"settings":
			{
				"buffer_size": 3085,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "demo/demo_cancel.cpp",
			"settings":
			{
				"buffer_size": 15674,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "demo/demo_priority.cpp",
			"settings":
			{
				"buffer_size": 19917,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "jq2.cpp",
			"settings":
			{
				"buffer_size": 58932,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "demo/demo_job_profile.cpp",
			"settings":
			{
				"buffer_size": 9949,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "clang++ -MMD -MT /home/jonasm/git/job-bench/bench/bench_jq/_temp/linux/debug/bench_jq.o -MF /home/jonasm/git/job-bench/bench/bench_jq/_temp/linux/debug/bench_jq.o.d -DTARGET_X86_64 -DMICROPROFILE_GPU_TIMERS=0 -g -Wno-format -stdlib=libc++ -std=c++11 -D_DEBUG -O0 -I\"/home/jonasm/git/job-bench/bench/bench_jq\" -I\"/home/jonasm/git/job-bench/microprofile\" -I\"/home/jonasm/git/job-bench/jq-private\"  -c bench_jq.cpp -o /home/jonasm/git/job-bench/bench/bench_jq/_temp/linux/debug/bench_jq.o\nclang++ -o demo_job_profile_m demo_job_profile.o  ../microprofile/microprofile.o ../jqpipe.o ../jqinternal.o ../boost_context/jump_x86_64_sysv_elf_gas.o ../boost_context/make_x86_64_sysv_elf_gas.o ../jqlocked.o -lpthread -lcurses -latomic -I.. -I../microprofile -I. -DGLEW_STATIC -Wall -g -O0 -Wno-invalid-offsetof -Wno-format -DJQ_ASSERT_LOCKS -DJQ_MICROPROFILE -DMICROPROFILE_MAX_THREADS=128 -DMICROPROFILE_GPU_TIMERS=0\n",
			"settings":
			{
				"buffer_size": 908,
				"line_ending": "Unix",
				"name": "clang++ -MMD -MT /home/jonasm/git/job-bench/bench/"
			}
		},
		{
			"file": "demo/demo_stress.cpp",
			"settings":
			{
				"buffer_size": 12616,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 131.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/jonasm/git/jq"
	],
	"file_history":
	[
		"/home/jonasm/git/jq/jqlocked.cpp",
		"/home/jonasm/git/jq/jq2.cpp",
		"/home/jonasm/git/jq/microprofile/microprofile.h",
		"/home/jonasm/git/jq/microprofile/demo/vulkan/Main.cpp",
		"/home/jonasm/git/jq/jqlockless.cpp",
		"/home/jonasm/git/jq/demo/microprofile.h",
		"/home/jonasm/git/jq/demo/microprofile.cpp",
		"/Users/jonasmeyer/git-windows/sph/_log/2020_11_20__21_31_37.log",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/shader.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/shader.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/array.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/renderimguimenu.cpp",
		"/Users/jonasmeyer/git-windows/sph/_clang-format",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/vulkancommandbuffer.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/rendercommandbuffer.h",
		"/Users/jonasmeyer/git-windows/sph/src/material.h",
		"/Users/jonasmeyer/git-windows/sph/src/material.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/object.h",
		"/Users/jonasmeyer/git-windows/sph/src/main.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/vulkancommandbuffer.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/pool.h",
		"/Users/jonasmeyer/git-windows/sph/src/mesh.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/mesh.h",
		"/Users/jonasmeyer/git-windows/sph/src/jq/boost_context/make_arm64_aapcs_macho_gas.S",
		"/Users/jonasmeyer/git-windows/sph/src/render/render.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/render.cpp",
		"/usr/local/include/vulkan/vulkan_core.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/vulkandevice.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/sys.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/rendertypes.h",
		"/Users/jonasmeyer/git-windows/sph/src/triangle_split_image.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/vulkaninc.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/vulkanbase.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/jq/jqpipe.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/pso.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/_vulkan/pso.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/icosphere.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/icosphere.h",
		"/Users/jonasmeyer/git-windows/sph/src/tilecache.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/graveyard.cpp",
		"/Users/jonasmeyer/git-windows/sph/_out/osx/sph_debug",
		"/Users/jonasmeyer/git-windows/sph/src/base/refcounted.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/renderfwd.h",
		"/Users/jonasmeyer/git-windows/sph/src/ngen.py",
		"/Users/jonasmeyer/git-windows/sph/src/ngen/rules.osx",
		"/Users/jonasmeyer/git-windows/sph/src/scene.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/v4.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/v4.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/v3.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/mathmisc.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/v3.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/mathtypes.h",
		"/Users/jonasmeyer/git-windows/sph/src/camera.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/shaderstructs.h",
		"/Users/jonasmeyer/git-windows/sph/src/debug.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/renderdebug.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/renderdebug.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/renderimgui.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/vulkancommandbuffer.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/build.ninja",
		"/Users/jonasmeyer/git-windows/sph/src/ngen.osx",
		"/Users/jonasmeyer/git-windows/sph/src/sphclient.cpp",
		"/Users/jonasmeyer/git-windows/sph/log/jonasm.log",
		"/Users/jonasmeyer/git-windows/sph/src/object.cpp",
		"/usr/local/include/lzma/base.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/base.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/buffer.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/buffer.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/shader.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/pso.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/sphclient.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/sys_linux.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/jq/jqinternal.h",
		"/Users/jonasmeyer/git-windows/sph/src/jq/jqinternal.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/jq/jq.h",
		"/Users/jonasmeyer/git-windows/sph/teast/sph/src/jq/demo/demo_stress.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/threading.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/threading.h",
		"/Users/jonasmeyer/git-windows/sph/sph.sublime-project",
		"/Users/jonasmeyer/git-windows/sph/src/base/socket_linux.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/socket_osx.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/socket.h",
		"/Users/jonasmeyer/git-windows/sph/src/imgui/imgui_demo.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/location/location_osx.mm",
		"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreLocation.framework/Headers/CLLocationManager.h",
		"/Users/jonasmeyer/git-windows/sph/src/stb/stb_image.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/httprequest.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/httprequest.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/vk_oldold.xpp",
		"/Users/jonasmeyer/git-windows/sph/teast/sph/src/jq/jqinternal.h",
		"/Users/jonasmeyer/git-windows/sph/src/materialinstance.cpp",
		"/Users/jonasmeyer/git-windows/sph/shaders/basic.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/rendertexture.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/rendertexture.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/mathmisc.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/vulkanentrypoints.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/render/vulkanentrypoints.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/vulkancommandbuffer.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/ps",
		"/Users/jonasmeyer/git-windows/sph/shaders/debug.hlsl",
		"/Users/jonasmeyer/git-windows/sph/shaders/globals.h",
		"/Users/jonasmeyer/git-windows/sph/shaders/ubo.h",
		"/Users/jonasmeyer/git-windows/sph/shaders/globe.hlsl",
		"/Users/jonasmeyer/git-windows/sph/src/camera.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/globalposition.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/globalposition.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/base.cpp",
		"/usr/local/include/glm/gtx/texture.hpp",
		"/Users/jonasmeyer/git-windows/sph/src/socketdebugread",
		"/Users/jonasmeyer/git-windows/sph/src/tilecache.h",
		"/Users/jonasmeyer/git-windows/sph/src/render/descriptorset.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/ngen.cfg",
		"/Users/jonasmeyer/git-windows/sph/src/ngen.win32",
		"/Users/jonasmeyer/git-windows/sph/src/ngen.linux",
		"/Users/jonasmeyer/git-windows/sph/src/base/sys_osx.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/zstring.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/m.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/md.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/v3d.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/quat.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/quat.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/v4d.h",
		"/Users/jonasmeyer/git-windows/sph/src/base/v4d.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/m.cpp",
		"/Users/jonasmeyer/git-windows/sph/src/base/md.cpp",
		"/Users/jonasmeyer/git-windows/sph/shaders/shader.frag",
		"/Users/jonasmeyer/git-windows/sph/shaders/standard_vert.vert",
		"/Users/jonasmeyer/git-windows/sph/shaders/standard_vert_rotation.vert"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 111.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"JqNextHandle",
			"JqDependentJobLink",
			"JQ_FUNCTION_SIZE",
			"JqTakeChildJob",
			"PendingFinish",
			"JqAddInternal",
			"JqQueuePopInternal",
			"JqFinishSubJob",
			"JOB_FINISH_PARENT",
			"JOB_FINISH_LOCK",
			"ES_CHILD",
			"PendingStartAndQueue",
			"JqPendingNonChildJobs",
			"JqAddInternal",
			"ES_CHILD",
			"ES_UNKNOWN",
			"JQ_MAX_JOB_STACK",
			"JqFinishSubJob",
			"StartedHandle",
			"JqFinishSubJob",
			"JqFinishInternal",
			"PendingStartAndQueue",
			"JqTakeChildJob",
			"PendingFinish",
			"JqQueuePopInternal",
			"MustRetry",
			"JqQueuePopInternal",
			"JqTakeJobFromChildList",
			"Children",
			"JQ_WAITFLAG_EXECUTE_SUCCESSORS",
			"Parents",
			"JqExecuteOne",
			"JQ_QUEUE_FULL_EXECUTE_JOBS",
			"JQ_JOB_FILL_PRC_LIMIT",
			"FreeJobs",
			"nFreeJobs",
			"nJobIndex",
			"Parent",
			"Parent =",
			"TriggerQue",
			"Jq_TAKK",
			"JqTriggerQueues",
			"MicroProfile_scope",
			"JQ_LOCKLESS_PEEK_COUNT",
			"Final",
			"JQ_LOCKLESS_POP",
			"JQ_LOCKLESS_PEEK_COUNT",
			"JqQueueTrigger",
			"QueueTriggerMask",
			"JqDecPrecondtion",
			"QueueNumSemaphores",
			"JqDecPrecondtion",
			"JqFinishInternal",
			"JqQueuePush",
			"JQ_LOCKLESS_PEEK_COUNT",
			"JQ_MICROPROFILE",
			"uint64_t J32",
			"JqFinishSubJob",
			"JqQueuePopInternal",
			"JqFinishSubJob",
			"JqFinishInternal",
			"JobSpinWork",
			"_32",
			"60",
			"JqQueueEmpty",
			"JqAddInternal",
			"nReserved",
			"nStalled",
			"nNumFinished",
			"JqQueueEmpty",
			"JqQueuePopInternal",
			"JqQueuePush",
			"Queues",
			"nJob",
			"JqQueuePop",
			"JqQueuePopInternal",
			"{\n",
			"JqQueuePopInternal",
			"JQ_LOCKLESS_POP",
			"Semaphore",
			"JqQueuePush",
			"JqFinishInternal",
			"JqFinishSubJob",
			"JqFinishInternal",
			"PendingFinish",
			"/",
			"printf",
			"ReservedHandle",
			"\"pop",
			"JqQueuePush",
			"JqPackStartAndQueue",
			"JqQueuePush",
			"8",
			"JQ_LOCKLESS_PEEK_COUNT",
			";",
			"JqQueuePush",
			"NextJob",
			"JqQueue",
			"JQ_LOCKLESS_POP",
			"PendingStartAndQueue",
			"JqUnpackStartAndQueue",
			"JqQueuePush",
			"PendingStartAndQueue",
			"LinkNext",
			"LinkPrev",
			"JQ_ASSERT(JobIndex)",
			"JqQueuePop",
			"JQ_LOCKLESS_PEEK_COUNT",
			"JqQueuePop",
			" false",
			"Tail2",
			"JqUnpackStartAndQueue",
			"JqQueuePop",
			"JqQueueRemove",
			"JqPackQueueLink",
			"JqQueuePop",
			"JqAddPrecondition",
			"Stats",
			"Final",
			"Barrier",
			"JqDependentJobLinkAlloc",
			"DependentJobLinkCounter",
			"DependentJobLinkMutex",
			"JqFinishInternal",
			"JqDecPrecondtion",
			"64",
			"JqAddPrecondition",
			"JqFinishInternal"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "jqmultilocked.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41238,
						"regions":
						{
						},
						"selection":
						[
							[
								28554,
								28554
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 20619.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "microprofile/microprofile.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 110975,
						"regions":
						{
						},
						"selection":
						[
							[
								74658,
								74719
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 13559.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/usr/include/c++/9/atomic",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43610,
						"regions":
						{
						},
						"selection":
						[
							[
								22612,
								22612
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15938.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "demo/demo_bench.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4366,
						"regions":
						{
						},
						"selection":
						[
							[
								3796,
								3826
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2431.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "jqinternal.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13236,
						"regions":
						{
						},
						"selection":
						[
							[
								2430,
								2430
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2202.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "jq.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 487,
						"regions":
						{
						},
						"selection":
						[
							[
								114,
								114
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "jqinternal.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17498,
						"regions":
						{
						},
						"selection":
						[
							[
								11604,
								11627
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3504.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "jq.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11221,
						"regions":
						{
						},
						"selection":
						[
							[
								10229,
								10229
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5897.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/usr/include/c++/9/cstdint",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2335,
						"regions":
						{
						},
						"selection":
						[
							[
								1371,
								1371
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41164,
						"regions":
						{
						},
						"selection":
						[
							[
								40159,
								40159
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 12,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 27741.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "jqfcontext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 303,
						"regions":
						{
						},
						"selection":
						[
							[
								34,
								34
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "jqpipe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7950,
						"regions":
						{
						},
						"selection":
						[
							[
								7339,
								7339
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5238.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "demo/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3085,
						"regions":
						{
						},
						"selection":
						[
							[
								1493,
								1493
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 669.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "demo/demo_cancel.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15674,
						"regions":
						{
						},
						"selection":
						[
							[
								4459,
								4459
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 839.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "demo/demo_priority.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19917,
						"regions":
						{
						},
						"selection":
						[
							[
								11847,
								11847
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7725.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "jq2.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58932,
						"regions":
						{
						},
						"selection":
						[
							[
								28903,
								28903
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 20050.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "demo/demo_job_profile.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9949,
						"regions":
						{
						},
						"selection":
						[
							[
								75,
								75
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 17,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 908,
						"regions":
						{
						},
						"selection":
						[
							[
								908,
								908
							]
						],
						"settings":
						{
							"auto_name": "clang++ -MMD -MT /home/jonasm/git/job-bench/bench/",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "demo/demo_stress.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12616,
						"regions":
						{
						},
						"selection":
						[
							[
								1804,
								1804
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 795.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 294.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "jq_demo",
	"project": "jq.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"jq2",
				"jq2.cpp"
			],
			[
				"",
				"jq2.cpp"
			],
			[
				"jq.h",
				"jq.h"
			],
			[
				"jq",
				"jq2.cpp"
			],
			[
				"make",
				"demo/Makefile"
			],
			[
				"jq2.",
				"jq2.cpp"
			],
			[
				"demo_",
				"demo/demo_priority.cpp"
			],
			[
				"demop",
				"demo/demo_priority.cpp"
			],
			[
				"demo",
				"demo/demo_priority.cpp"
			],
			[
				"jqlo",
				"jqlocked.cpp"
			],
			[
				"prio",
				"demo/demo_priority.cpp"
			],
			[
				"jqin",
				"jqinternal.h"
			],
			[
				"jql",
				"jqlocked.cpp"
			],
			[
				"demo_pr",
				"demo/demo_priority.cpp"
			],
			[
				"mak",
				"demo/Makefile"
			],
			[
				"demo_str",
				"demo/demo_stress.cpp"
			],
			[
				"demo_job",
				"demo/demo_job_profile.cpp"
			],
			[
				"jq.",
				"jq.h"
			],
			[
				"demo_p",
				"demo/demo_priority.cpp"
			],
			[
				"makef",
				"demo/Makefile"
			],
			[
				"dmeo_",
				"demo/demo_priority.cpp"
			],
			[
				"jqk",
				"jqlocked.cpp"
			],
			[
				"jq.c",
				"jq2.cpp"
			],
			[
				"demo_be",
				"demo/demo_bench.cpp"
			],
			[
				"jq.cpp",
				"jqlocked.cpp"
			],
			[
				"demo_pri",
				"demo/demo_priority.cpp"
			],
			[
				"demo_s",
				"demo/demo_stress.cpp"
			],
			[
				"demo_ca",
				"demo/demo_cancel.cpp"
			],
			[
				"jq.cp",
				"jqlocked.cpp"
			],
			[
				"jqmu",
				"jqmultilocked.cpp"
			],
			[
				"jqloc",
				"jqlocked.cpp"
			],
			[
				"jqmul",
				"jqmultilocked.cpp"
			],
			[
				"j",
				"jqlocked.cpp"
			],
			[
				"demo__jo",
				"demo/demo_job_profile.cpp"
			],
			[
				"micropro",
				"microprofile/microprofile.h"
			],
			[
				"MICROPROFI",
				"microprofile/microprofile.h"
			],
			[
				"job ",
				"demo/demo_job_profile.cpp"
			],
			[
				"democ",
				"demo/demo_cancel.cpp"
			],
			[
				"demo can",
				"demo/demo_cancel.cpp"
			],
			[
				"jqint",
				"jqinternal.h"
			],
			[
				"micro",
				"microprofile/microprofile.h"
			],
			[
				"main",
				"microprofile/demo/vulkan/Main.cpp"
			],
			[
				"demo job",
				"demo/demo_job_profile.cpp"
			],
			[
				"jk",
				"jqmultilocked.cpp"
			],
			[
				"micr",
				"demo/microprofile.h"
			],
			[
				"demo_prio",
				"demo/demo_priority.cpp"
			],
			[
				"jqpi",
				"jqpipe.cpp"
			],
			[
				"ico",
				"sph/src/icosphere.cpp"
			],
			[
				"imguime",
				"sph/src/render/renderimguimenu.cpp"
			],
			[
				"menu",
				"include/msgpack/preprocessor/enum.hpp"
			],
			[
				"sphcli",
				"sph/src/sphclient.cpp"
			],
			[
				"sph",
				"sph/src/sphclient.cpp"
			],
			[
				"sec",
				"sph/src/sectorid.cpp"
			],
			[
				"sectori",
				"sph/src/sectorid.cpp"
			],
			[
				"secto",
				"sph/src/sectorid.cpp"
			],
			[
				"imgmenu",
				"sph/src/render/renderimguimenu.cpp"
			],
			[
				"main.c",
				"sph/src/main.cpp"
			],
			[
				"poo",
				"sph/src/base/pool.cpp"
			],
			[
				"sys.h",
				"sph/src/base/sys.h"
			],
			[
				"sy.h",
				"include/msgpack/sysdep.h"
			],
			[
				"globa",
				"sph/src/globalposition.cpp"
			],
			[
				"camera",
				"sph/src/camera.cpp"
			],
			[
				"global",
				"sph/src/globalposition.cpp"
			],
			[
				"glo",
				"sph/src/globalposition.cpp"
			],
			[
				"imgui",
				"sph/src/render/renderimgui.cpp"
			],
			[
				"defe",
				"sph/src/base/defer.h"
			],
			[
				"scen",
				"sph/src/scene.cpp"
			],
			[
				"imguim",
				"sph/src/render/renderimguimenu.cpp"
			],
			[
				"loca",
				"sph/src/location/location.h"
			],
			[
				"jonasm",
				"sph/log/jonasm.log"
			],
			[
				"main.",
				"sph/src/main.cpp"
			],
			[
				"ic",
				"sph/src/icosphere.cpp"
			],
			[
				"renderty",
				"sph/src/render/rendertypes.h"
			],
			[
				"obj",
				"sph/src/object.h"
			],
			[
				"jonas",
				"sph/log/jonasm.log"
			],
			[
				"todo",
				"sph/src/todo.jonasm"
			],
			[
				"vulkanin",
				"sph/src/render/_vulkan/vulkaninc.h"
			],
			[
				"shader.cpp",
				"~/git-windows/sph/src/render/_vulkan/shader.cpp"
			],
			[
				"globe",
				"sph/shaders/globe.hlsl"
			],
			[
				"pso.h",
				"sph/src/render/_vulkan/vulkanpso.h"
			],
			[
				"sha",
				"sph/src/render/_vulkan/shader.h"
			],
			[
				"render .h",
				"sph/src/render/rendertypes.h"
			],
			[
				"shader",
				"sph/src/render/_vulkan/shader.h"
			],
			[
				"vulkanpso",
				"sph/src/render/_vulkan/vulkanpso.cpp"
			],
			[
				"vulkan ps",
				"sph/src/render/_vulkan/vulkanpso.h"
			],
			[
				".gitin",
				"sph/src/ngen/.gitignore"
			],
			[
				"refc",
				"sph/src/base/refcounted.h"
			],
			[
				"shader.cp",
				"sph/src/render/_vulkan/shader.cpp"
			],
			[
				"shader.h",
				"sph/src/render/_vulkan/shader.h"
			],
			[
				"limit",
				"sph/src/objectlimits.h"
			],
			[
				"limits",
				"include/glslang/Include/ResourceLimits.h"
			],
			[
				"vulkanps",
				"sph/src/render/_vulkan/vulkanpso.h"
			],
			[
				"shader.c",
				"sph/src/render/_vulkan/shader.cpp"
			],
			[
				"vulkandev",
				"sph/src/render/_vulkan/vulkandevice.cpp"
			],
			[
				"device",
				"sph/src/base/render/renderdevice.cpp"
			],
			[
				"render",
				"sph/src/render/render.cpp"
			],
			[
				"pool",
				"sph/src/base/pool.cpp"
			],
			[
				"sys",
				"sph/src/base/sys_osx.cpp"
			],
			[
				"ref",
				"sph/src/base/refcounted.h"
			],
			[
				"clien",
				"sph/src/sphclient.h"
			],
			[
				"sphcl",
				"sph/src/sphclient.cpp"
			],
			[
				"pool.",
				"sph/src/base/pool.cpp"
			],
			[
				"scene.c",
				"sph/src/scene.cpp"
			],
			[
				"commandlin",
				"sph/src/base/commandline.cpp"
			],
			[
				"zstrin",
				"sph/src/base/zstring.h"
			],
			[
				"command",
				"sph/src/base/commandline.h"
			],
			[
				"array.",
				"sph/src/base/array.h"
			],
			[
				"vkco",
				"include/vulkan/vulkan_core.h"
			],
			[
				"sys.",
				"sph/src/base/sys.h"
			],
			[
				"vulkanb",
				"sph/src/render/_vulkan/vulkanbase.cpp"
			],
			[
				"vulkaninc",
				"sph/src/render/_vulkan/vulkaninc.h"
			],
			[
				"pso",
				"sph/src/render/_vulkan/pso.cpp"
			],
			[
				"shader.",
				"sph/src/render/_vulkan/shader.h"
			],
			[
				"vulkacomma",
				"sph/src/render/_vulkan/vulkancommandbuffer.cpp"
			],
			[
				"pso.",
				"sph/src/render/_vulkan/pso.h"
			],
			[
				"material",
				"sph/src/material.cpp"
			],
			[
				"rendert",
				"sph/src/render/rendertypes.h"
			],
			[
				"ommandbuff",
				"sph/src/render/rendercommandbuffer.h"
			],
			[
				"render.cp",
				"sph/src/render/render.cpp"
			],
			[
				"renderim",
				"sph/src/render/renderimguimenu.cpp"
			],
			[
				"vulkanco",
				"sph/src/render/_vulkan/vulkancommandbuffer.cpp"
			],
			[
				"mesh",
				"sph/src/mesh.h"
			],
			[
				"mehs",
				"sph/src/jq/boost_context/make_arm64_aapcs_macho_gas.S"
			],
			[
				"shade",
				"sph/src/render/_vulkan/shader.h"
			],
			[
				"vulkancp",
				"sph/src/render/_vulkan/vulkancommandbuffer.cpp"
			],
			[
				"_cla",
				"sph/_clang-format"
			],
			[
				"renderfw",
				"sph/src/render/renderfwd.h"
			],
			[
				"_cl",
				"sph/_clang-format"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 362.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
